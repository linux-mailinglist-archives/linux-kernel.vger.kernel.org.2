Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id E988B3FA6AA
	for <lists+linux-kernel@lfdr.de>; Sat, 28 Aug 2021 18:07:01 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S234467AbhH1QHg (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Sat, 28 Aug 2021 12:07:36 -0400
Received: from smtp-out2.suse.de ([195.135.220.29]:33614 "EHLO
        smtp-out2.suse.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230290AbhH1QHf (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 28 Aug 2021 12:07:35 -0400
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
        by smtp-out2.suse.de (Postfix) with ESMTP id 65F6B1FFF0;
        Sat, 28 Aug 2021 16:06:43 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1630166803; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=+hbC3CoQ9GVXH6EUwVQgeUfZ0rKGJOCmzlFVSyEolJ8=;
        b=kISMPvHHQ6O8y4GUBGL/H/u/F0Zg4JfidpT4awwChegbQm4rSecP9MHT53bxdlNuUfqHN3
        5hxsvPpEva673ZNrGGuAEWaGDO6zxIyhZhTSUwOx0ieokZmvFZHGo71dkUDUSwznlff1A8
        cPad3NU11BlUccwe7ofiJTvQqbXkzhU=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1630166803;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=+hbC3CoQ9GVXH6EUwVQgeUfZ0rKGJOCmzlFVSyEolJ8=;
        b=fmISJ3gxhJnk41FlFazH1RZt4ZDZ8QvP5XEsQCVklpYTXWRol/3L5BhqSadzFaGvQMDrb3
        MpbEl6WbJuN6uHAw==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
        by relay2.suse.de (Postfix) with ESMTP id 5FF18A3B88;
        Sat, 28 Aug 2021 16:06:43 +0000 (UTC)
Date:   Sat, 28 Aug 2021 18:06:43 +0200
Message-ID: <s5h7dg5sgdo.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Luiz Augusto von Dentz <luiz.dentz@gmail.com>
Cc:     "linux-bluetooth@vger.kernel.org" <linux-bluetooth@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: CVE-2021-3640 and the unlimited block of lock_sock()
In-Reply-To: <CABBYNZ+1=k2eQ4u1WWdj9JcBaB3HmjXzv8rVhQ89gwHDf4YHTg@mail.gmail.com>
References: <s5hv9418mjk.wl-tiwai@suse.de>
        <s5hk0k8wlfn.wl-tiwai@suse.de>
        <CABBYNZ+1=k2eQ4u1WWdj9JcBaB3HmjXzv8rVhQ89gwHDf4YHTg@mail.gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 27 Aug 2021 03:28:09 +0200,
Luiz Augusto von Dentz wrote:
> 
> Hi Takashi,
> 
> On Thu, Aug 26, 2021 at 3:29 AM Takashi Iwai <tiwai@suse.de> wrote:
> >
> > On Thu, 19 Aug 2021 17:46:39 +0200,
> > Takashi Iwai wrote:
> > >
> > > Hi,
> > >
> > > it seems that the recent fixes in bluetooth tree address most of
> > > issues in CVE-2021-3640 ("Use-After-Free vulnerability in function
> > > sco_sock_sendmsg()").  But there is still a problem left: although we
> > > cover the race with lock_sock() now, the lock may be blocked endlessly
> > > (as the task takes over with userfaultd), which result in the trigger
> > > of watchdog like:
> > >
> > > -- 8< --
> > > [   23.226767][    T7] Bluetooth: hci0: command 0x0419 tx timeout
> > > [  284.985881][ T1529] INFO: task poc:7603 blocked for more than 143 seconds.
> > > [  284.989134][ T1529]       Not tainted 5.13.0-rc4+ #48
> > > [  284.990098][ T1529] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
> > > [  284.991705][ T1529] task:poc             state:D stack:13784 pid: 7603 ppid:  7593 flags:0x00000000
> > > [  284.993414][ T1529] Call Trace:
> > > [  284.994025][ T1529]  __schedule+0x32e/0xb90
> > > [  284.994842][ T1529]  ? __local_bh_enable_ip+0x72/0xe0
> > > [  284.995987][ T1529]  schedule+0x38/0xe0
> > > [  284.996723][ T1529]  __lock_sock+0xa1/0x130
> > > [  284.997434][ T1529]  ? finish_wait+0x80/0x80
> > > [  284.998150][ T1529]  lock_sock_nested+0x9f/0xb0
> > > [  284.998914][ T1529]  sco_conn_del+0xb1/0x1a0
> > > [  284.999619][ T1529]  ? sco_conn_del+0x1a0/0x1a0
> > > [  285.000361][ T1529]  sco_disconn_cfm+0x3a/0x60
> > > [  285.001116][ T1529]  hci_conn_hash_flush+0x95/0x130
> > > [  285.001921][ T1529]  hci_dev_do_close+0x298/0x680
> > > [  285.002687][ T1529]  ? up_write+0x12/0x130
> > > [  285.003367][ T1529]  ? vhci_close_dev+0x20/0x20
> > > [  285.004107][ T1529]  hci_unregister_dev+0x9f/0x240
> > > [  285.004886][ T1529]  vhci_release+0x35/0x70
> > > [  285.005602][ T1529]  __fput+0xdf/0x360
> > > [  285.006225][ T1529]  task_work_run+0x86/0xd0
> > > [  285.006927][ T1529]  exit_to_user_mode_prepare+0x267/0x270
> > > [  285.007824][ T1529]  syscall_exit_to_user_mode+0x19/0x60
> > > [  285.008694][ T1529]  do_syscall_64+0x42/0xa0
> > > [  285.009393][ T1529]  entry_SYSCALL_64_after_hwframe+0x44/0xae
> > > [  285.010321][ T1529] RIP: 0033:0x4065c7
> > > -- 8< --
> > >
> > > Is there any plan to address this?
> > >
> > > As a quick hack, I confirmed a workaround like below:
> > >
> > > -- 8< --
> > > --- a/net/core/sock.c
> > > +++ b/net/core/sock.c
> > > @@ -2628,7 +2628,7 @@ void __lock_sock(struct sock *sk)
> > >               prepare_to_wait_exclusive(&sk->sk_lock.wq, &wait,
> > >                                       TASK_UNINTERRUPTIBLE);
> > >               spin_unlock_bh(&sk->sk_lock.slock);
> > > -             schedule();
> > > +             schedule_timeout(msecs_to_jiffies(10 * 1000));
> > >               spin_lock_bh(&sk->sk_lock.slock);
> > >               if (!sock_owned_by_user(sk))
> > >                       break;
> > > -- 8< --
> > >
> > > .... but I'm not sure whether it's the right way to go.
> >
> > Does anyone has an idea?
> 
> It seems that we need to rework some code so the functions affected by
> userfaultfd are not used with sock_lock held.

OK, now I tried a similar way like the commit 92c685dc5de0 to move the
memcpy_from_msg() call out of lock_sock(), and it seems working.
I'm going to submit the fix.


thanks,

Takashi
