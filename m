Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id CFF19324FF8
	for <lists+linux-kernel@lfdr.de>; Thu, 25 Feb 2021 13:52:42 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233404AbhBYMwE (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Thu, 25 Feb 2021 07:52:04 -0500
Received: from mx2.suse.de ([195.135.220.15]:35508 "EHLO mx2.suse.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S233087AbhBYMv6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 25 Feb 2021 07:51:58 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
        by mx2.suse.de (Postfix) with ESMTP id EC3DDAF5B;
        Thu, 25 Feb 2021 12:51:16 +0000 (UTC)
Date:   Thu, 25 Feb 2021 13:51:16 +0100
Message-ID: <s5hlfbcpayj.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Anton Yakovlev <anton.yakovlev@opensynergy.com>
Cc:     <virtualization@lists.linux-foundation.org>,
        <alsa-devel@alsa-project.org>, <virtio-dev@lists.oasis-open.org>,
        "Michael S. Tsirkin" <mst@redhat.com>,
        Jaroslav Kysela <perex@perex.cz>,
        Takashi Iwai <tiwai@suse.com>, <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH v5 6/9] ALSA: virtio: PCM substream operators
In-Reply-To: <d9b6e8fa-7356-1cbf-029b-6f7c8bad4994@opensynergy.com>
References: <20210222153444.348390-1-anton.yakovlev@opensynergy.com>
        <20210222153444.348390-7-anton.yakovlev@opensynergy.com>
        <s5h35xkquvj.wl-tiwai@suse.de>
        <d9b6e8fa-7356-1cbf-029b-6f7c8bad4994@opensynergy.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 25 Feb 2021 13:14:37 +0100,
Anton Yakovlev wrote:
> 
> On 25.02.2021 11:55, Takashi Iwai wrote:
> > On Mon, 22 Feb 2021 16:34:41 +0100,
> > Anton Yakovlev wrote:
> >> +static int virtsnd_pcm_open(struct snd_pcm_substream *substream)
> >> +{
> >> +     struct virtio_pcm *vpcm = snd_pcm_substream_chip(substream);
> >> +     struct virtio_pcm_substream *vss = NULL;
> >> +
> >> +     if (vpcm) {
> >> +             switch (substream->stream) {
> >> +             case SNDRV_PCM_STREAM_PLAYBACK:
> >> +             case SNDRV_PCM_STREAM_CAPTURE: {
> >
> > The switch() here looks superfluous.  The substream->stream must be a
> > good value in the callback.  If any, you can put WARN_ON() there, but
> > I don't think it worth.
> 
> At least it doesn't do any harm.

It does -- it makes the readability worse, and that's a very important
point.

> >> +static int virtsnd_pcm_hw_params(struct snd_pcm_substream *substream,
> >> +                              struct snd_pcm_hw_params *hw_params)
> >> +{
> > ....
> >> +     return virtsnd_pcm_msg_alloc(vss, periods, period_bytes);
> >
> > We have the allocation, but...
> >
> >> +static int virtsnd_pcm_hw_free(struct snd_pcm_substream *substream)
> >> +{
> >> +     return 0;
> >
> > ... no release at hw_free()?
> > I know that the free is present in the allocator, but it's only for
> > re-allocation case, I suppose.
> 
> When the substream stops, sync_ptr waits until the device has completed
> all pending messages. This wait can be interrupted either by a signal or
> due to a timeout. In this case, the device can still access messages
> even after calling hw_free(). It can also issue an interrupt, and the
> interrupt handler will also try to access message structures. Therefore,
> freeing of already allocated messages occurs either in hw_params() or in
> dev->release(), since there it is 100% safe.

OK, then it's worth to document it about this object lifecycle.
The buffer management of this driver is fairly unique, so otherwise it
confuses readers.


thanks,

Takashi
