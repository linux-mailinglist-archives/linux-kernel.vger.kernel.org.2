Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id A5C093D6FA1
	for <lists+linux-kernel@lfdr.de>; Tue, 27 Jul 2021 08:47:52 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S235636AbhG0Gru (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Tue, 27 Jul 2021 02:47:50 -0400
Received: from smtp-out1.suse.de ([195.135.220.28]:59790 "EHLO
        smtp-out1.suse.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S235296AbhG0Grs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Jul 2021 02:47:48 -0400
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
        by smtp-out1.suse.de (Postfix) with ESMTP id 9C02B22106;
        Tue, 27 Jul 2021 06:47:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1627368467; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=XzoDRt4O83/EYGv/WuJBa4qe/fT4Mky56nzFc8R987g=;
        b=AHLjbmRmhNM23ZCoVwvRpM1sayHPmNAUCkKHJ6g7uGSjhLoRHU+yTeyvAA3ey8jJb2RU0w
        LKR2d9LwX0lEtPFSeRygTdFq1k25AvU2DALdUzNXrB5y/BHCxjrYW/udE2qDYZAEWXDOsb
        uJ7E5kxr9ceJ6U0SikW2Y5ZNTq43UHk=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1627368467;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=XzoDRt4O83/EYGv/WuJBa4qe/fT4Mky56nzFc8R987g=;
        b=MNDVyg7vE9NryVFzzkZ4xPw/loLXSJWasBTVGYSz9An/FzkM29OW+PhcnqNEHohGTHWxBB
        ri9YLxNGMOA0CHCg==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
        by relay2.suse.de (Postfix) with ESMTP id 881D2A3B87;
        Tue, 27 Jul 2021 06:47:47 +0000 (UTC)
Date:   Tue, 27 Jul 2021 08:47:47 +0200
Message-ID: <s5h4kcgfe24.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Vitaly Rodionov <vitalyr@opensource.cirrus.com>
Cc:     Jaroslav Kysela <perex@perex.cz>, Takashi Iwai <tiwai@suse.com>,
        <alsa-devel@alsa-project.org>, <patches@opensource.cirrus.com>,
        <linux-kernel@vger.kernel.org>,
        Lucas Tanure <tanureal@opensource.cirrus.com>
Subject: Re: [PATCH 13/27] ALSA: hda/cs8409: Dont disable I2C clock between consecutive accesses
In-Reply-To: <20210726174640.6390-14-vitalyr@opensource.cirrus.com>
References: <20210726174640.6390-1-vitalyr@opensource.cirrus.com>
        <20210726174640.6390-14-vitalyr@opensource.cirrus.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, 26 Jul 2021 19:46:26 +0200,
Vitaly Rodionov wrote:
> 
> From: Lucas Tanure <tanureal@opensource.cirrus.com>
> 
> Only disable I2C clock 25 ms after not being used

This is error-prone and might be racy, I'm afraid.
e.g. the offloaded work isn't canceled when unbinding the driver, so
it'll lead to a use-after-free.  And the work doesn't take a mutex so
it may conflict with re-enabling side.

Above all, there is no description "why" this has to be done so.
Is it about the performance, or any other reason?


thanks,

Takashi

> 
> Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
> Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
> ---
>  sound/pci/hda/patch_cs8409.c | 42 +++++++++++++++++++++++-------------
>  sound/pci/hda/patch_cs8409.h |  4 ++++
>  2 files changed, 31 insertions(+), 15 deletions(-)
> 
> diff --git a/sound/pci/hda/patch_cs8409.c b/sound/pci/hda/patch_cs8409.c
> index 08205c19698c..335bcdc69106 100644
> --- a/sound/pci/hda/patch_cs8409.c
> +++ b/sound/pci/hda/patch_cs8409.c
> @@ -53,6 +53,7 @@ static struct cs8409_spec *cs8409_alloc_spec(struct hda_codec *codec)
>  	if (!spec)
>  		return NULL;
>  	codec->spec = spec;
> +	spec->codec = codec;
>  	codec->power_save_node = 1;
>  	snd_hda_gen_spec_init(&spec->gen);
>  
> @@ -72,21 +73,34 @@ static inline void cs8409_vendor_coef_set(struct hda_codec *codec, unsigned int
>  	snd_hda_codec_write(codec, CS8409_PIN_VENDOR_WIDGET, 0, AC_VERB_SET_PROC_COEF, coef);
>  }
>  
> -/**
> +/*
> + * cs8409_disable_i2c_clock - Worker that disable the I2C Clock after 25ms without use
> + */
> +static void cs8409_disable_i2c_clock(struct work_struct *work)
> +{
> +	struct cs8409_spec *spec = container_of(work, struct cs8409_spec, i2c_clk_work.work);
> +
> +	cs8409_vendor_coef_set(spec->codec, 0x0,
> +			       cs8409_vendor_coef_get(spec->codec, 0x0) & 0xfffffff7);
> +	spec->i2c_clck_enabled = 0;
> +}
> +
> +/*
>   * cs8409_enable_i2c_clock - Enable I2C clocks
>   * @codec: the codec instance
> - * @enable: Enable or disable I2C clocks
> - *
>   * Enable or Disable I2C clocks.
>   */
> -static void cs8409_enable_i2c_clock(struct hda_codec *codec, unsigned int enable)
> +static void cs8409_enable_i2c_clock(struct hda_codec *codec)
>  {
> -	unsigned int retval;
> -	unsigned int newval;
> +	struct cs8409_spec *spec = codec->spec;
> +
> +	cancel_delayed_work_sync(&spec->i2c_clk_work);
>  
> -	retval = cs8409_vendor_coef_get(codec, 0x0);
> -	newval = (enable) ? (retval | 0x8) : (retval & 0xfffffff7);
> -	cs8409_vendor_coef_set(codec, 0x0, newval);
> +	if (!spec->i2c_clck_enabled) {
> +		cs8409_vendor_coef_set(codec, 0x0, cs8409_vendor_coef_get(codec, 0x0) | 0x8);
> +		spec->i2c_clck_enabled = 1;
> +	}
> +	queue_delayed_work(system_power_efficient_wq, &spec->i2c_clk_work, msecs_to_jiffies(25));
>  }
>  
>  /**
> @@ -134,7 +148,7 @@ static int cs8409_i2c_read(struct hda_codec *codec, unsigned int i2c_address, un
>  	if (spec->cs42l42_suspended)
>  		return -EPERM;
>  
> -	cs8409_enable_i2c_clock(codec, 1);
> +	cs8409_enable_i2c_clock(codec);
>  	cs8409_vendor_coef_set(codec, CS8409_I2C_ADDR, i2c_address);
>  
>  	if (paged) {
> @@ -157,8 +171,6 @@ static int cs8409_i2c_read(struct hda_codec *codec, unsigned int i2c_address, un
>  	/* Register in bits 15-8 and the data in 7-0 */
>  	read_data = cs8409_vendor_coef_get(codec, CS8409_I2C_QREAD);
>  
> -	cs8409_enable_i2c_clock(codec, 0);
> -
>  	return read_data & 0x0ff;
>  }
>  
> @@ -182,7 +194,7 @@ static int cs8409_i2c_write(struct hda_codec *codec, unsigned int i2c_address, u
>  	if (spec->cs42l42_suspended)
>  		return -EPERM;
>  
> -	cs8409_enable_i2c_clock(codec, 1);
> +	cs8409_enable_i2c_clock(codec);
>  	cs8409_vendor_coef_set(codec, CS8409_I2C_ADDR, i2c_address);
>  
>  	if (paged) {
> @@ -203,8 +215,6 @@ static int cs8409_i2c_write(struct hda_codec *codec, unsigned int i2c_address, u
>  		return -EIO;
>  	}
>  
> -	cs8409_enable_i2c_clock(codec, 0);
> -
>  	return 0;
>  }
>  
> @@ -705,6 +715,8 @@ void cs8409_cs42l42_fixups(struct hda_codec *codec, const struct hda_fixup *fix,
>  		spec->cs42l42_mic_jack_in = 0;
>  		spec->cs42l42_suspended = 1;
>  
> +		INIT_DELAYED_WORK(&spec->i2c_clk_work, cs8409_disable_i2c_clock);
> +
>  		/* Basic initial sequence for specific hw configuration */
>  		snd_hda_sequence_write(codec, cs8409_cs42l42_init_verbs);
>  
> diff --git a/sound/pci/hda/patch_cs8409.h b/sound/pci/hda/patch_cs8409.h
> index bf0e8a4cc4cc..542582c213d2 100644
> --- a/sound/pci/hda/patch_cs8409.h
> +++ b/sound/pci/hda/patch_cs8409.h
> @@ -11,6 +11,7 @@
>  
>  #include <linux/pci.h>
>  #include <sound/tlv.h>
> +#include <linux/workqueue.h>
>  #include <sound/hda_codec.h>
>  #include "hda_local.h"
>  #include "hda_auto_parser.h"
> @@ -267,6 +268,7 @@ struct cs8409_cir_param {
>  
>  struct cs8409_spec {
>  	struct hda_gen_spec gen;
> +	struct hda_codec *codec;
>  
>  	unsigned int gpio_mask;
>  	unsigned int gpio_dir;
> @@ -278,6 +280,8 @@ struct cs8409_spec {
>  	s8 vol[CS42L42_VOLUMES];
>  
>  	struct mutex cs8409_i2c_mux;
> +	unsigned int i2c_clck_enabled;
> +	struct delayed_work i2c_clk_work;
>  
>  	/* verb exec op override */
>  	int (*exec_verb)(struct hdac_device *dev, unsigned int cmd, unsigned int flags,
> -- 
> 2.25.1
> 
