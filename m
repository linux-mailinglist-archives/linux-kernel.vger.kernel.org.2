Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 088943F85D0
	for <lists+linux-kernel@lfdr.de>; Thu, 26 Aug 2021 12:49:26 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S241559AbhHZKuD (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Thu, 26 Aug 2021 06:50:03 -0400
Received: from smtp-out1.suse.de ([195.135.220.28]:40084 "EHLO
        smtp-out1.suse.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S234327AbhHZKt7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 26 Aug 2021 06:49:59 -0400
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
        by smtp-out1.suse.de (Postfix) with ESMTP id D23FB222CD;
        Thu, 26 Aug 2021 10:49:11 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1629974951; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=7NVS9OI1fs2Z7OHaLZdCp7jkiVKSbEuKJi+PNLYoQ1g=;
        b=vsU3XcOWyDOGYYEN/rXXvMulewcmea+bKA/sNOE+4PxiaIGl2ULn7rYLtHHXZ3lAirlpRA
        ZV56kj+E+FIAWBdeWFv2pRJMdjb/nmTCz6XMP+06bH6wmPUmCM/nMQn1ARPtsFGRmItv2E
        8CAMooWwjrk4AUBiAz+0Oj7mQDdVoHA=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1629974951;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=7NVS9OI1fs2Z7OHaLZdCp7jkiVKSbEuKJi+PNLYoQ1g=;
        b=r7Tm31Vu8fm9bKxXUQ2YtnPsiWmai90h8vm8KmRVtY6e/4tZIDTvQxM5hQw0UnLg6y2jS1
        NNq13BiL2RqbeKBw==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
        by relay2.suse.de (Postfix) with ESMTP id C0CD6A3B95;
        Thu, 26 Aug 2021 10:49:11 +0000 (UTC)
Date:   Thu, 26 Aug 2021 12:49:11 +0200
Message-ID: <s5hfsuwwkew.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Vitaly Rodionov <vitalyr@opensource.cirrus.com>
Cc:     <alsa-devel@alsa-project.org>, <patches@opensource.cirrus.com>,
        Stefan Binding <sbinding@opensource.cirrus.com>,
        Takashi Iwai <tiwai@suse.com>, <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH 2/2] ALSA: hda/cs8409: Prevent pops and clicks during reboot
In-Reply-To: <s5hczq0yc72.wl-tiwai@suse.de>
References: <20210812183433.6330-1-vitalyr@opensource.cirrus.com>
        <20210812183433.6330-2-vitalyr@opensource.cirrus.com>
        <s5h1r6xlvrs.wl-tiwai@suse.de>
        <s5hczqgil3v.wl-tiwai@suse.de>
        <6595e87d-1dae-b536-c17b-eafa07d04bbe@opensource.cirrus.com>
        <s5hpmuce05m.wl-tiwai@suse.de>
        <e3df5f97-bf43-7eb8-e15d-4ab11dbae7ef@opensource.cirrus.com>
        <s5hczq0yc72.wl-tiwai@suse.de>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 26 Aug 2021 08:03:45 +0200,
Takashi Iwai wrote:
> 
> On Wed, 25 Aug 2021 20:04:05 +0200,
> Vitaly Rodionov wrote:
> > Actually when codec is suspended and we do reboot from UI, then sometimes we
> > see suspend() calls in kernel log and no pops, but sometimes
> > 
> > we still have no suspend() on reboot and we hear pops. But when we do reboot
> > from command line: > sudo reboot  then we always have pops and no suspend()
> > called.
> > 
> > Then we have added extra logging and we can see that on reboot codec somehow
> > getting resume() call and we run jack detect on resume that causing pops.
> 
> Hm, it's interesting who triggers the runtime resume.
> 
> > We were thinking about possible solution for that and we would propose some
> > changes in generic code hda_bind.c:
> > 
> > static void hda_codec_driver_shutdown(struct device *dev) { +   if (codec->
> > patch_ops.suspend) +      codec->patch_ops.suspend(codec);   
> > snd_hda_codec_shutdown(dev_to_hda_codec(dev)); +  hda_codec_driver_remove
> > (dev_to_hda_codec(dev)); }
> 
> Sorry, it's no-no.  The suspend can't be called unconditionally, and
> the driver unbind must not be called in the callback itself.
> 
> Does the patch below work instead?

Sorry there was a typo.  A bit more revised patch is below.


Takashi

--- a/sound/pci/hda/hda_intel.c
+++ b/sound/pci/hda/hda_intel.c
@@ -1383,14 +1383,17 @@ static void azx_free(struct azx *chip)
 	hda->freed = 1;
 }
 
-static int azx_dev_disconnect(struct snd_device *device)
+static void __azx_disconnect(struct azx *chip)
 {
-	struct azx *chip = device->device_data;
 	struct hdac_bus *bus = azx_bus(chip);
 
 	chip->bus.shutdown = 1;
 	cancel_work_sync(&bus->unsol_work);
+}
 
+static int azx_dev_disconnect(struct snd_device *device)
+{
+	__azx_disconnect(device->device_data);
 	return 0;
 }
 
@@ -2356,8 +2359,10 @@ static void azx_shutdown(struct pci_dev *pci)
 	if (!card)
 		return;
 	chip = card->private_data;
-	if (chip && chip->running)
+	if (chip && chip->running) {
+		__azx_disconnect(chip);
 		azx_shutdown_chip(chip);
+	}
 }
 
 /* PCI IDs */
